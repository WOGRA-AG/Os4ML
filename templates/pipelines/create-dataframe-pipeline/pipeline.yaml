apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: create-dataframe-pipeline-
  annotations:
    pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
    pipelines.kubeflow.org/pipeline_compilation_time: '2022-04-03T11:45:51.648148'
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"name": "bucket", "type":
      "String"}, {"name": "file_name", "type": "String"}, {"default": "", "name":
      "pipeline-root"}, {"default": "pipeline/create-dataframe-pipeline", "name":
      "pipeline-name"}], "name": "create-dataframe-pipeline"}'
    pipelines.kubeflow.org/v2_pipeline: "true"
  labels:
    pipelines.kubeflow.org/v2_pipeline: "true"
    pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
spec:
  entrypoint: create-dataframe-pipeline
  templates:
  - name: create-dataframe
    container:
      args:
      - sh
      - -c
      - |2

        if ! [ -x "$(command -v pip)" ]; then
            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
        fi

        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas>=1.4.0' 'xlrd>=2.0.1' 'openpyxl>=3.0.9' 'kfp==1.8.11' && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp -d)
        printf "%s" "$0" > "$program_path/ephemeral_component.py"
        python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
      - |2+

        import kfp
        from kfp.v2 import dsl
        from kfp.v2.dsl import *
        from typing import *

        def create_dataframe(bucket: str, file_name: str) -> NamedTuple('DatabagInfo',
                                                                        [('databag_type', str),
                                                                         ('databag_file', str),
                                                                         ('dataframe', Dataset),
                                                                         ]):
            """
            Creates a dataframe from the file in the object store.
            :param bucket: bucket of the file
            :param file_name: name of the file
            :return: returns databag_type, databag_file, dataframe
            For local_file databags the databag_file is None.
            For zip_file databags the databag_file is the location of the zip_file.
            The zip_file should only contain directories. The names of them are the labels
            and the files in them are the features.
            """
            import pandas as pd
            import pathlib
            import zipfile
            import enum
            import requests
            import tempfile
            import io
            from typing import BinaryIO
            from collections.abc import Generator

            class DatabagTypes(str, enum.Enum):
                local_file = 'local_file'
                zip_file = 'zip_file'

            def download_file(url: str, output_file: BinaryIO, chunk_size=128) -> None:
                response = requests.get(url, stream=True)
                for chunk in response.iter_content(chunk_size=chunk_size):
                    output_file.write(chunk)

            def iter_dirs_of_zip_with_labels(zip_file: BinaryIO) -> Generator[tuple[str, str], None, None]:
                with zipfile.ZipFile(zip_file) as root:
                    unpacked_root_dir = next(zipfile.Path(root).iterdir())
                    for label_dir in unpacked_root_dir.iterdir():
                        label = label_dir.name
                        for file in label_dir.iterdir():
                            file_name = file.filename.resolve().relative_to(unpacked_root_dir.parent.filename.resolve())
                            yield str(file_name), label

            data_uri = f'http://os4ml-objectstore-manager.os4ml:8000/apis/v1beta1/objectstore/{bucket}/object/{file_name}'
            file_path = pathlib.Path(file_name)
            match file_path.suffix:
                case '.csv':
                    df = pd.read_csv(data_uri)
                    databag_type, databag_file = DatabagTypes.local_file, ''
                case '.xls' | '.xlsx' | '.xlsm' | '.xlsb' | '.odf' | '.ods':
                    df = pd.read_excel(data_uri, sheet_name=0)
                    databag_type, databag_file = DatabagTypes.local_file, ''
                case '.zip':
                    with tempfile.NamedTemporaryFile() as tmp_file:
                        download_file(data_uri, tmp_file)
                        df = pd.DataFrame(iter_dirs_of_zip_with_labels(tmp_file), columns=['file', 'label'])
                    databag_type, databag_file = DatabagTypes.zip_file, data_uri
                case _:
                    raise NotImplementedError()

            databag_info = NamedTuple('DatabagInfo',
                                      [('databag_type', str),
                                       ('databag_file', str),
                                       ('dataframe', Dataset),
                                       ])
            # TODO save result to bucket? -> solver has to redo this step
            with io.BytesIO() as output_dataframe:
                df.to_pickle(output_dataframe)
                return databag_info(databag_type, databag_file, output_dataframe.getvalue())

      - --executor_input
      - '{{$}}'
      - --function_to_execute
      - create_dataframe
      command: [/kfp-launcher/launch, --mlmd_server_address, $(METADATA_GRPC_SERVICE_HOST),
        --mlmd_server_port, $(METADATA_GRPC_SERVICE_PORT), --runtime_info_json, $(KFP_V2_RUNTIME_INFO),
        --container_image, $(KFP_V2_IMAGE), --task_name, create-dataframe, --pipeline_name,
        '{{inputs.parameters.pipeline-name}}', --run_id, $(KFP_RUN_ID), --run_resource,
        workflows.argoproj.io/$(WORKFLOW_ID), --namespace, $(KFP_NAMESPACE), --pod_name,
        $(KFP_POD_NAME), --pod_uid, $(KFP_POD_UID), --pipeline_root, '{{inputs.parameters.pipeline-root}}',
        --enable_caching, $(ENABLE_CACHING), --, 'bucket={{inputs.parameters.bucket}}',
        'file_name={{inputs.parameters.file_name}}', --]
      env:
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_POD_UID
        valueFrom:
          fieldRef: {fieldPath: metadata.uid}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_RUN_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipeline/runid'']'}
      - name: ENABLE_CACHING
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipelines.kubeflow.org/enable_caching'']'}
      - {name: KFP_V2_IMAGE, value: 'python:3.10.2-slim'}
      - {name: KFP_V2_RUNTIME_INFO, value: '{"inputParameters": {"bucket": {"type":
          "STRING"}, "file_name": {"type": "STRING"}}, "inputArtifacts": {}, "outputParameters":
          {"databag_file": {"type": "STRING", "path": "/tmp/outputs/databag_file/data"},
          "databag_type": {"type": "STRING", "path": "/tmp/outputs/databag_type/data"}},
          "outputArtifacts": {"dataframe": {"schemaTitle": "system.Dataset", "instanceSchema":
          "", "schemaVersion": "0.0.1", "metadataPath": "/tmp/outputs/dataframe/data"}}}'}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: python:3.10.2-slim
      volumeMounts:
      - {mountPath: /kfp-launcher, name: kfp-launcher}
    inputs:
      parameters:
      - {name: bucket}
      - {name: file_name}
      - {name: pipeline-name}
      - {name: pipeline-root}
    outputs:
      artifacts:
      - {name: create-dataframe-databag_file, path: /tmp/outputs/databag_file/data}
      - {name: create-dataframe-databag_type, path: /tmp/outputs/databag_type/data}
      - {name: create-dataframe-dataframe, path: /tmp/outputs/dataframe/data}
    metadata:
      annotations:
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/component_ref: '{"digest": "f47ec3b8be981acf2b630479e9d9cde0ce088378d7e1a0884863260fb217c715",
          "url": "../../components/create-dataframe/component.yaml"}'
        pipelines.kubeflow.org/arguments.parameters: '{"bucket": "{{inputs.parameters.bucket}}",
          "file_name": "{{inputs.parameters.file_name}}"}'
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/enable_caching: "true"
    initContainers:
    - command: [launcher, --copy, /kfp-launcher/launch]
      image: gcr.io/ml-pipeline/kfp-launcher:1.8.7
      name: kfp-launcher
      mirrorVolumeMounts: true
    volumes:
    - {name: kfp-launcher}
  - name: create-dataframe-pipeline
    inputs:
      parameters:
      - {name: bucket}
      - {name: file_name}
      - {name: pipeline-name}
      - {name: pipeline-root}
    dag:
      tasks:
      - name: create-dataframe
        template: create-dataframe
        arguments:
          parameters:
          - {name: bucket, value: '{{inputs.parameters.bucket}}'}
          - {name: file_name, value: '{{inputs.parameters.file_name}}'}
          - {name: pipeline-name, value: '{{inputs.parameters.pipeline-name}}'}
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
  arguments:
    parameters:
    - {name: bucket}
    - {name: file_name}
    - {name: pipeline-root, value: ''}
    - {name: pipeline-name, value: pipeline/create-dataframe-pipeline}
  serviceAccountName: pipeline-runner
