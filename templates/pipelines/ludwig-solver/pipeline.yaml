apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: create-dataframe-pipeline-
  annotations:
    pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
    pipelines.kubeflow.org/pipeline_compilation_time: '2022-04-06T11:48:12.164146'
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"name": "bucket", "type":
      "String"}, {"name": "file_name", "type": "String"}, {"default": "50", "name":
      "epochs", "optional": true, "type": "Integer"}, {"default": "", "name": "pipeline-root"},
      {"default": "pipeline/create-dataframe-pipeline", "name": "pipeline-name"}],
      "name": "create-dataframe-pipeline"}'
    pipelines.kubeflow.org/v2_pipeline: "true"
  labels:
    pipelines.kubeflow.org/v2_pipeline: "true"
    pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
spec:
  entrypoint: create-dataframe-pipeline
  templates:
  - name: create-dataframe-pipeline
    inputs:
      parameters:
      - {name: bucket}
      - {name: epochs}
      - {name: file_name}
      - {name: pipeline-name}
      - {name: pipeline-root}
    dag:
      tasks:
      - name: download-from-objectstore
        template: download-from-objectstore
        arguments:
          parameters:
          - {name: bucket, value: '{{inputs.parameters.bucket}}'}
          - {name: pipeline-name, value: '{{inputs.parameters.pipeline-name}}'}
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
      - name: init-databag
        template: init-databag
        arguments:
          parameters:
          - {name: bucket, value: '{{inputs.parameters.bucket}}'}
          - {name: file_name, value: '{{inputs.parameters.file_name}}'}
          - {name: pipeline-name, value: '{{inputs.parameters.pipeline-name}}'}
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
      - name: ludwig-solver
        template: ludwig-solver
        dependencies: [download-from-objectstore, init-databag]
        arguments:
          parameters:
          - {name: epochs, value: '{{inputs.parameters.epochs}}'}
          - {name: pipeline-name, value: '{{inputs.parameters.pipeline-name}}'}
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
          artifacts:
          - {name: download-from-objectstore-Output, from: '{{tasks.download-from-objectstore.outputs.artifacts.download-from-objectstore-Output}}'}
          - {name: init-databag-dataset, from: '{{tasks.init-databag.outputs.artifacts.init-databag-dataset}}'}
  - name: download-from-objectstore
    container:
      args:
      - sh
      - -c
      - |2

        if ! [ -x "$(command -v pip)" ]; then
            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
        fi

        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp -d)
        printf "%s" "$0" > "$program_path/ephemeral_component.py"
        python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
      - |2+

        import kfp
        from kfp.v2 import dsl
        from kfp.v2.dsl import *
        from typing import *

        def download_from_objectstore(bucket: str, file_name: str) -> Dataset:
            import requests
            url = f'http://os4ml-objectstore-manager.os4ml:8000/apis/v1beta1/objectstore/{bucket}/object/{file_name}'
            response = requests.get(url)
            return response.text

      - --executor_input
      - '{{$}}'
      - --function_to_execute
      - download_from_objectstore
      command: [/kfp-launcher/launch, --mlmd_server_address, $(METADATA_GRPC_SERVICE_HOST),
        --mlmd_server_port, $(METADATA_GRPC_SERVICE_PORT), --runtime_info_json, $(KFP_V2_RUNTIME_INFO),
        --container_image, $(KFP_V2_IMAGE), --task_name, download-from-objectstore,
        --pipeline_name, '{{inputs.parameters.pipeline-name}}', --run_id, $(KFP_RUN_ID),
        --run_resource, workflows.argoproj.io/$(WORKFLOW_ID), --namespace, $(KFP_NAMESPACE),
        --pod_name, $(KFP_POD_NAME), --pod_uid, $(KFP_POD_UID), --pipeline_root, '{{inputs.parameters.pipeline-root}}',
        --enable_caching, $(ENABLE_CACHING), --, 'bucket={{inputs.parameters.bucket}}',
        file_name=databag.json, --]
      env:
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_POD_UID
        valueFrom:
          fieldRef: {fieldPath: metadata.uid}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_RUN_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipeline/runid'']'}
      - name: ENABLE_CACHING
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipelines.kubeflow.org/enable_caching'']'}
      - {name: KFP_V2_IMAGE, value: 'python:3.10.2-slim'}
      - {name: KFP_V2_RUNTIME_INFO, value: '{"inputParameters": {"bucket": {"type":
          "STRING"}, "file_name": {"type": "STRING"}}, "inputArtifacts": {}, "outputParameters":
          {}, "outputArtifacts": {"Output": {"schemaTitle": "system.Dataset", "instanceSchema":
          "", "schemaVersion": "0.0.1", "metadataPath": "/tmp/outputs/Output/data"}}}'}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: python:3.10.2-slim
      volumeMounts:
      - {mountPath: /kfp-launcher, name: kfp-launcher}
    inputs:
      parameters:
      - {name: bucket}
      - {name: pipeline-name}
      - {name: pipeline-root}
    outputs:
      artifacts:
      - {name: download-from-objectstore-Output, path: /tmp/outputs/Output/data}
    metadata:
      annotations:
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/component_ref: '{"digest": "ac21737c2269e1c247a4a53d329d77ac138c254f2efdd7fa81aba89d1e0cffbd",
          "url": "../../components/download-from-objectstore/component.yaml"}'
        pipelines.kubeflow.org/arguments.parameters: '{"bucket": "{{inputs.parameters.bucket}}",
          "file_name": "databag.json"}'
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/enable_caching: "true"
    initContainers:
    - command: [launcher, --copy, /kfp-launcher/launch]
      image: gcr.io/ml-pipeline/kfp-launcher:1.8.7
      name: kfp-launcher
      mirrorVolumeMounts: true
    volumes:
    - {name: kfp-launcher}
  - name: init-databag
    container:
      args:
      - sh
      - -c
      - |2

        if ! [ -x "$(command -v pip)" ]; then
            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
        fi

        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas>=1.4.0' 'xlrd>=2.0.1' 'openpyxl>=3.0.9' 'kfp==1.8.11' && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp -d)
        printf "%s" "$0" > "$program_path/ephemeral_component.py"
        python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
      - |2+

        import kfp
        from kfp.v2 import dsl
        from kfp.v2.dsl import *
        from typing import *

        def init_databag(bucket: str, file_name: str) -> NamedTuple('DatabagInfo',
                                                                    [('databag_type', str),
                                                                     ('dataset', Dataset),
                                                                     ]):
            """
            Inits the databag by specifying its type and creating the dataset.
            If the file is a zip file it should only contain directories in the top level.
            The names of them are used as labels and the files they contain are used as features.
            """
            import pandas as pd
            import pathlib
            import zipfile
            import enum
            import requests
            import tempfile
            from typing import BinaryIO
            from collections.abc import Generator

            class DatabagTypes(str, enum.Enum):
                local_file = 'local_file'
                zip_file = 'zip_file'

            def download_file(url: str, output_file: BinaryIO, chunk_size=128) -> None:
                response = requests.get(url, stream=True)
                for chunk in response.iter_content(chunk_size=chunk_size):
                    output_file.write(chunk)

            def iter_dirs_of_zip_with_labels(zip_file: BinaryIO) -> Generator[tuple[str, str], None, None]:
                with zipfile.ZipFile(zip_file) as root:
                    unpacked_root_dir = next(zipfile.Path(root).iterdir())
                    for label_dir in unpacked_root_dir.iterdir():
                        label = label_dir.name
                        for file in label_dir.iterdir():
                            file_name = file.filename.resolve().relative_to(unpacked_root_dir.parent.filename.resolve())
                            yield str(file_name), label

            data_uri = f'http://os4ml-objectstore-manager.os4ml:8000/apis/v1beta1/objectstore/{bucket}/object/{file_name}'
            file_path = pathlib.Path(file_name)
            match file_path.suffix:
                case '.csv':
                    df = pd.read_csv(data_uri)
                    databag_type = DatabagTypes.local_file
                case '.xls' | '.xlsx' | '.xlsm' | '.xlsb' | '.odf' | '.ods':
                    df = pd.read_excel(data_uri, sheet_name=0)
                    databag_type = DatabagTypes.local_file
                case '.zip':
                    with tempfile.NamedTemporaryFile() as tmp_file:
                        download_file(data_uri, tmp_file)
                        df = pd.DataFrame(iter_dirs_of_zip_with_labels(tmp_file), columns=['file', 'label'])
                    databag_type = DatabagTypes.zip_file
                case _:
                    raise NotImplementedError()

            databag_info = NamedTuple('DatabagInfo',
                                      [('databag_type', str),
                                       ('dataset', Dataset),
                                       ])
            return databag_info(databag_type.value, df.to_csv(index=False))

      - --executor_input
      - '{{$}}'
      - --function_to_execute
      - init_databag
      command: [/kfp-launcher/launch, --mlmd_server_address, $(METADATA_GRPC_SERVICE_HOST),
        --mlmd_server_port, $(METADATA_GRPC_SERVICE_PORT), --runtime_info_json, $(KFP_V2_RUNTIME_INFO),
        --container_image, $(KFP_V2_IMAGE), --task_name, init-databag, --pipeline_name,
        '{{inputs.parameters.pipeline-name}}', --run_id, $(KFP_RUN_ID), --run_resource,
        workflows.argoproj.io/$(WORKFLOW_ID), --namespace, $(KFP_NAMESPACE), --pod_name,
        $(KFP_POD_NAME), --pod_uid, $(KFP_POD_UID), --pipeline_root, '{{inputs.parameters.pipeline-root}}',
        --enable_caching, $(ENABLE_CACHING), --, 'bucket={{inputs.parameters.bucket}}',
        'file_name={{inputs.parameters.file_name}}', --]
      env:
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_POD_UID
        valueFrom:
          fieldRef: {fieldPath: metadata.uid}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_RUN_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipeline/runid'']'}
      - name: ENABLE_CACHING
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipelines.kubeflow.org/enable_caching'']'}
      - {name: KFP_V2_IMAGE, value: 'python:3.10.2-slim'}
      - {name: KFP_V2_RUNTIME_INFO, value: '{"inputParameters": {"bucket": {"type":
          "STRING"}, "file_name": {"type": "STRING"}}, "inputArtifacts": {}, "outputParameters":
          {"databag_type": {"type": "STRING", "path": "/tmp/outputs/databag_type/data"}},
          "outputArtifacts": {"dataset": {"schemaTitle": "system.Dataset", "instanceSchema":
          "", "schemaVersion": "0.0.1", "metadataPath": "/tmp/outputs/dataset/data"}}}'}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: python:3.10.2-slim
      volumeMounts:
      - {mountPath: /kfp-launcher, name: kfp-launcher}
    inputs:
      parameters:
      - {name: bucket}
      - {name: file_name}
      - {name: pipeline-name}
      - {name: pipeline-root}
    outputs:
      artifacts:
      - {name: init-databag-databag_type, path: /tmp/outputs/databag_type/data}
      - {name: init-databag-dataset, path: /tmp/outputs/dataset/data}
    metadata:
      annotations:
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/component_ref: '{"digest": "212b45e37594b2c539544c750458286994c9f8752c60e3839157c5928a530c69",
          "url": "../../components/init-databag/component.yaml"}'
        pipelines.kubeflow.org/arguments.parameters: '{"bucket": "{{inputs.parameters.bucket}}",
          "file_name": "{{inputs.parameters.file_name}}"}'
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/enable_caching: "true"
    initContainers:
    - command: [launcher, --copy, /kfp-launcher/launch]
      image: gcr.io/ml-pipeline/kfp-launcher:1.8.7
      name: kfp-launcher
      mirrorVolumeMounts: true
    volumes:
    - {name: kfp-launcher}
  - name: ludwig-solver
    container:
      args:
      - sh
      - -c
      - |2

        if ! [ -x "$(command -v pip)" ]; then
            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
        fi

        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp -d)
        printf "%s" "$0" > "$program_path/ephemeral_component.py"
        python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
      - |2+

        import kfp
        from kfp.v2 import dsl
        from kfp.v2.dsl import *
        from typing import *

        def ludwig_solver(dataset_file: Input[Dataset],
                          databag_info: Input[Dataset],
                          cls_metrics: Output[ClassificationMetrics],
                          metrics: Output[Metrics],
                          batch_size: int = 8,
                          epochs: int = 50,
                          early_stop: int = 10):
            from ludwig.api import LudwigModel
            from sklearn.model_selection import train_test_split
            from sklearn.metrics import confusion_matrix
            from typing import List, BinaryIO
            import dataclasses
            import pandas as pd
            import enum
            import json
            import logging
            import requests
            import zipfile
            import pathlib

            class ColumnDataType(str, enum.Enum):
                NUMERICAL = 'numerical'
                DATE = 'date'
                CATEGORY = 'category'
                TEXT = 'text'
                IMAGE = 'image'

            class ColumnUsage(str, enum.Enum):
                LABEL = 'label'
                FEATURE = 'feature'

            class DatabagTypes(str, enum.Enum):
                local_file = 'local_file'
                zip_file = 'zip_file'

            @dataclasses.dataclass
            class Column:
                name: str
                type: str
                usage: str
                num_entries: int

            def build_model_definition(columns: List[Column]):
                definition = {
                    "input_features": [],
                    "output_features": [],
                    "training": {
                        "batch_size": batch_size,
                        "epochs": epochs,
                        "early_stop": early_stop,
                    }
                }
                feature_descriptions = (
                    create_feature_description(column)
                    for column in columns
                    if column.usage == ColumnUsage.FEATURE
                )
                label_descriptions = (
                    create_label_description(column)
                    for column in columns
                    if column.usage == ColumnUsage.LABEL
                )
                definition['input_features'].extend(feature_descriptions)
                definition['output_features'].extend(label_descriptions)
                return definition

            def create_feature_description(feature: Column) -> dict:
                feature_desc = {
                    'name': feature.name,
                    'type': feature.type,
                }
                if feature.type == ColumnDataType.NUMERICAL:
                    feature_desc['preprocessing'] = {
                        'fill_value': 0
                    }
                return feature_desc

            def create_label_description(label: Column) -> dict:
                label_type = ColumnDataType.NUMERICAL \
                    if label.type == ColumnDataType.NUMERICAL \
                    else ColumnDataType.CATEGORY
                return {
                    'name': label.name,
                    'type': label_type,
                }

            def download_file(url: str, output_file: BinaryIO, chunk_size=128) -> None:
                response = requests.get(url, stream=True)
                for chunk in response.iter_content(chunk_size=chunk_size):
                    output_file.write(chunk)

            def path_to_absolute(rel_path: str):
                rel = pathlib.Path(rel_path)
                return str(rel.resolve())

            def download_zip(output):
                bucket = settings['bucketName']
                file_name = settings['fileName']
                url = f'http://os4ml-objectstore-manager.os4ml:8000/apis/v1beta1/objectstore/{bucket}/object/{file_name}'
                with open(output, 'wb') as file:
                    download_file(url, file)

            with open(databag_info.path) as file:
                settings = json.load(file)

            columns = [
                Column(**column_dict)
                for column_dict in settings['columns']
            ]

            model_definition = build_model_definition(columns)
            model = LudwigModel(model_definition, logging_level=logging.INFO)

            with open(dataset_file.path, 'r') as input_file:
                dataset = pd.read_csv(input_file)

            if settings['datasetType'] == DatabagTypes.zip_file:
                zip_file = 'dataset.zip'
                download_zip(zip_file)
                with zipfile.ZipFile(zip_file) as ds_zip:
                    ds_zip.extractall()
                dataset['file'] = dataset['file'].map(path_to_absolute)

            df_tmp, df_test = train_test_split(dataset, test_size=0.1, random_state=42)
            df_train, df_validate = train_test_split(df_tmp, test_size=0.1,
                                                     random_state=42)
            label = model_definition['output_features'][0]['name']
            categories = dataset[label].unique().astype(str)

            model.train(df_train, df_validate, df_test)
            stats, pred, _ = model.evaluate(df_test, collect_predictions=True)

            accuracy = float(stats[label]['accuracy'])

            prediction_key = next(iter(pred))
            y_pred = pred[prediction_key]
            y_true = df_test[label].astype(str)
            conf_matrix = confusion_matrix(y_true, y_pred, labels=categories).tolist()

            metrics.log_metric('accuracy', accuracy)
            cls_metrics.log_confusion_matrix(categories, conf_matrix)

      - --executor_input
      - '{{$}}'
      - --function_to_execute
      - ludwig_solver
      command: [/kfp-launcher/launch, --mlmd_server_address, $(METADATA_GRPC_SERVICE_HOST),
        --mlmd_server_port, $(METADATA_GRPC_SERVICE_PORT), --runtime_info_json, $(KFP_V2_RUNTIME_INFO),
        --container_image, $(KFP_V2_IMAGE), --task_name, ludwig-solver, --pipeline_name,
        '{{inputs.parameters.pipeline-name}}', --run_id, $(KFP_RUN_ID), --run_resource,
        workflows.argoproj.io/$(WORKFLOW_ID), --namespace, $(KFP_NAMESPACE), --pod_name,
        $(KFP_POD_NAME), --pod_uid, $(KFP_POD_UID), --pipeline_root, '{{inputs.parameters.pipeline-root}}',
        --enable_caching, $(ENABLE_CACHING), --, batch_size=8, early_stop=10, 'epochs={{inputs.parameters.epochs}}',
        --]
      env:
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_POD_UID
        valueFrom:
          fieldRef: {fieldPath: metadata.uid}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_RUN_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipeline/runid'']'}
      - name: ENABLE_CACHING
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipelines.kubeflow.org/enable_caching'']'}
      - {name: KFP_V2_IMAGE, value: 'gitlab-registry.wogra.com/developer/wogra/os4ml/template-ludwig:164-genimgsol-databag-aus-bildern-erzeugen'}
      - {name: KFP_V2_RUNTIME_INFO, value: '{"inputParameters": {"batch_size": {"type":
          "INT"}, "early_stop": {"type": "INT"}, "epochs": {"type": "INT"}}, "inputArtifacts":
          {"databag_info": {"metadataPath": "/tmp/inputs/databag_info/data", "schemaTitle":
          "system.Dataset", "instanceSchema": "", "schemaVersion": "0.0.1"}, "dataset_file":
          {"metadataPath": "/tmp/inputs/dataset_file/data", "schemaTitle": "system.Dataset",
          "instanceSchema": "", "schemaVersion": "0.0.1"}}, "outputParameters": {},
          "outputArtifacts": {"cls_metrics": {"schemaTitle": "system.ClassificationMetrics",
          "instanceSchema": "", "schemaVersion": "0.0.1", "metadataPath": "/tmp/outputs/cls_metrics/data"},
          "metrics": {"schemaTitle": "system.Metrics", "instanceSchema": "", "schemaVersion":
          "0.0.1", "metadataPath": "/tmp/outputs/metrics/data"}}}'}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: gitlab-registry.wogra.com/developer/wogra/os4ml/template-ludwig:164-genimgsol-databag-aus-bildern-erzeugen
      volumeMounts:
      - {mountPath: /kfp-launcher, name: kfp-launcher}
    inputs:
      parameters:
      - {name: epochs}
      - {name: pipeline-name}
      - {name: pipeline-root}
      artifacts:
      - {name: download-from-objectstore-Output, path: /tmp/inputs/databag_info/data}
      - {name: init-databag-dataset, path: /tmp/inputs/dataset_file/data}
    outputs:
      artifacts:
      - {name: ludwig-solver-cls_metrics, path: /tmp/outputs/cls_metrics/data}
      - {name: ludwig-solver-metrics, path: /tmp/outputs/metrics/data}
    metadata:
      annotations:
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/component_ref: '{"digest": "0f7250c5c5f3f271a68ec578bc4329df1e141c80366afca37c6710dd29c9bc87",
          "url": "../../components/ludwig-solver/component.yaml"}'
        pipelines.kubeflow.org/arguments.parameters: '{"batch_size": "8", "early_stop":
          "10", "epochs": "{{inputs.parameters.epochs}}"}'
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/enable_caching: "true"
    initContainers:
    - command: [launcher, --copy, /kfp-launcher/launch]
      image: gcr.io/ml-pipeline/kfp-launcher:1.8.7
      name: kfp-launcher
      mirrorVolumeMounts: true
    volumes:
    - {name: kfp-launcher}
  arguments:
    parameters:
    - {name: bucket}
    - {name: file_name}
    - {name: epochs, value: '50'}
    - {name: pipeline-root, value: ''}
    - {name: pipeline-name, value: pipeline/create-dataframe-pipeline}
  serviceAccountName: pipeline-runner
