apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: katib-solver-pipeline-
  annotations:
    pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
    pipelines.kubeflow.org/pipeline_compilation_time: '2022-04-11T10:17:39.914229'
    pipelines.kubeflow.org/pipeline_spec: '{"inputs": [{"default": "", "name": "pipeline-root"},
      {"default": "pipeline/katib-solver-pipeline", "name": "pipeline-name"}], "name":
      "katib-solver-pipeline"}'
    pipelines.kubeflow.org/v2_pipeline: "true"
  labels:
    pipelines.kubeflow.org/v2_pipeline: "true"
    pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
spec:
  entrypoint: katib-solver-pipeline
  templates:
  - name: katib-solver
    container:
      args:
      - sh
      - -c
      - |2

        if ! [ -x "$(command -v pip)" ]; then
            python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
        fi

        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kubeflow-katib>=0.13.0' 'kfp==1.8.11' && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp -d)
        printf "%s" "$0" > "$program_path/ephemeral_component.py"
        python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
      - |2+

        import kfp
        from kfp.v2 import dsl
        from kfp.v2.dsl import *
        from typing import *

        def katib_solver():
            from kubeflow.katib import KatibClient
            from kubernetes.client import V1ObjectMeta
            from kubeflow.katib import V1beta1Experiment
            from kubeflow.katib import V1beta1AlgorithmSpec
            from kubeflow.katib import V1beta1AlgorithmSetting
            from kubeflow.katib import V1beta1ObjectiveSpec
            from kubeflow.katib import V1beta1MetricsCollectorSpec
            from kubeflow.katib import V1beta1CollectorSpec
            from kubeflow.katib import V1beta1SourceSpec
            from kubeflow.katib import V1beta1FilterSpec
            from kubeflow.katib import V1beta1FeasibleSpace
            from kubeflow.katib import V1beta1ExperimentSpec
            from kubeflow.katib import V1beta1NasConfig
            from kubeflow.katib import V1beta1GraphConfig
            from kubeflow.katib import V1beta1Operation
            from kubeflow.katib import V1beta1ParameterSpec
            from kubeflow.katib import V1beta1TrialTemplate
            from kubeflow.katib import V1beta1TrialParameterSpec

            namespace = "kubeflow-user-example-com"
            experiment_name = "enas-example"

            metadata = V1ObjectMeta(
                name=experiment_name,
                namespace=namespace
            )

            algorithm_spec = V1beta1AlgorithmSpec(
                algorithm_name="enas",
            )

            objective_spec = V1beta1ObjectiveSpec(
                type="maximize",
                goal=0.99,
                objective_metric_name="Validation-Accuracy",
            )

            # TODO: need this or is default?
            metrics_collector_spec = V1beta1MetricsCollectorSpec(
                collector=V1beta1CollectorSpec(
                    kind="StdOut"
                ),
            )

            nas_config = V1beta1NasConfig(
                graph_config=V1beta1GraphConfig(
                    num_layers=8,
                    input_sizes=[32, 32, 3],
                    output_sizes=[10],
                ),
                # TODO: decrease search space
                # uses only 6 operations, 3x3/5x5 convolution, 3x3/5x5 separable_convolution and 3x3 max_pooling/avg_pooling
                operations=[
                    V1beta1Operation(
                        operation_type="convolution",
                        parameters=[
                            V1beta1ParameterSpec(
                                name="filter_size",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["3", "5", "7"]),
                            ),
                            V1beta1ParameterSpec(
                                name="num_filter",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["32", "48",  "64", "96", "128"]),
                            ),
                            V1beta1ParameterSpec(
                                name="stride",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["1", "2"]),
                            ),
                        ]
                    ),
                    V1beta1Operation(
                        operation_type="separable_convolution",
                        parameters=[
                            V1beta1ParameterSpec(
                                name="filter_size",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["3", "5", "7"]),
                            ),
                            V1beta1ParameterSpec(
                                name="num_filter",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["32", "48", "64", "96", "128"]),
                            ),
                            V1beta1ParameterSpec(
                                name="stride",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["1", "2"]),
                            ),
                            V1beta1ParameterSpec(
                                name="depth_multiplier",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["1", "2"]),
                            ),
                        ]
                    ),
                    V1beta1Operation(
                        operation_type="depthwise_convolution",
                        parameters=[
                            V1beta1ParameterSpec(
                                name="filter_size",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["3", "5", "7"]),
                            ),
                            V1beta1ParameterSpec(
                                name="stride",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["1", "2"]),
                            ),
                            V1beta1ParameterSpec(
                                name="depth_multiplier",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["1", "2"]),
                            ),
                        ]
                    ),
                    V1beta1Operation(
                        operation_type="reduction",
                        parameters=[
                            V1beta1ParameterSpec(
                                name="reduction_type",
                                parameter_type="categorical",
                                feasible_space=V1beta1FeasibleSpace(list=["max_pooling", "avg_pooling"]),
                            ),
                            V1beta1ParameterSpec(
                                name="pool_size",
                                parameter_type="int",
                                feasible_space=V1beta1FeasibleSpace(list=["2", "3"]),
                            )
                        ]
                    ),
                ]
            )

            trial_spec = {
                "apiVersion": "batch/v1",
                "kind": "Job",
                "spec": {
                    "template": {
                        "metadata": {
                            "annotations": {
                                "sidecar.istio.io/inject": "false"
                            }
                        },
                        "spec": {
                            "containers": [
                                {
                                    "name": "training-container",
                                    "image": "docker.io/kubeflowkatib/enas-cnn-cifar10-gpu:latest",
                                    "command": [
                                        'python3 ',
                                        '-u ',
                                        'RunTrial.py '
                                        '--architecture="${trialParameters.neuralNetworkArchitecture}" '
                                        '--nn_config="${trialParameters.neuralNetworkConfig}"',
                                    ],
                                    # TODO: enable gpu
                                    # Training container requires 1 GPU.
                                    # "resources": {
                                    #     "limits": {
                                    #         "nvidia.com/gpu": 1
                                    #     }
                                    # }
                                }
                            ],
                            "restartPolicy": "Never"
                        }
                    }
                }
            }

            # Template with Trial parameters and Trial spec.
            # Set retain to True to save trial resources after completion.
            trial_template = V1beta1TrialTemplate(
                # retain=True,
                primary_container_name="training-container",
                trial_parameters=[
                    V1beta1TrialParameterSpec(
                        name="neuralNetworkArchitecture",
                        description="NN architecture contains operations ID on each NN layer and skip connections between "
                                    "layers",
                        reference="architecture",
                    ),
                    V1beta1TrialParameterSpec(
                        name="neuralNetworkConfig",
                        description="Configuration contains NN number of layers, input and output sizes, description what each "
                                    "operation ID means",
                        reference="nn_config",
                    ),
                ],
                trial_spec=trial_spec
            )

            # Experiment object.
            experiment = V1beta1Experiment(
                api_version="kubeflow.org/v1beta1",
                kind="Experiment",
                metadata=metadata,
                spec=V1beta1ExperimentSpec(
                    # TODO: increase parallel_trial_count to 3
                    parallel_trial_count=1,
                    max_trial_count=12,
                    max_failed_trial_count=1,
                    objective=objective_spec,
                    algorithm=algorithm_spec,
                    metrics_collector_spec=metrics_collector_spec,
                    nas_config=nas_config,
                    trial_template=trial_template,
                )
            )

            # Create client.
            kclient = KatibClient()

            # Create your Experiment.
            kclient.create_experiment(experiment, namespace=namespace)

      - --executor_input
      - '{{$}}'
      - --function_to_execute
      - katib_solver
      command: [/kfp-launcher/launch, --mlmd_server_address, $(METADATA_GRPC_SERVICE_HOST),
        --mlmd_server_port, $(METADATA_GRPC_SERVICE_PORT), --runtime_info_json, $(KFP_V2_RUNTIME_INFO),
        --container_image, $(KFP_V2_IMAGE), --task_name, katib-solver, --pipeline_name,
        '{{inputs.parameters.pipeline-name}}', --run_id, $(KFP_RUN_ID), --run_resource,
        workflows.argoproj.io/$(WORKFLOW_ID), --namespace, $(KFP_NAMESPACE), --pod_name,
        $(KFP_POD_NAME), --pod_uid, $(KFP_POD_UID), --pipeline_root, '{{inputs.parameters.pipeline-root}}',
        --enable_caching, $(ENABLE_CACHING), --, --]
      env:
      - name: KFP_POD_NAME
        valueFrom:
          fieldRef: {fieldPath: metadata.name}
      - name: KFP_POD_UID
        valueFrom:
          fieldRef: {fieldPath: metadata.uid}
      - name: KFP_NAMESPACE
        valueFrom:
          fieldRef: {fieldPath: metadata.namespace}
      - name: WORKFLOW_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''workflows.argoproj.io/workflow'']'}
      - name: KFP_RUN_ID
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipeline/runid'']'}
      - name: ENABLE_CACHING
        valueFrom:
          fieldRef: {fieldPath: 'metadata.labels[''pipelines.kubeflow.org/enable_caching'']'}
      - {name: KFP_V2_IMAGE, value: 'python:3.10.2-slim'}
      - {name: KFP_V2_RUNTIME_INFO, value: '{"inputParameters": {}, "inputArtifacts":
          {}, "outputParameters": {}, "outputArtifacts": {}}'}
      envFrom:
      - configMapRef: {name: metadata-grpc-configmap, optional: true}
      image: python:3.10.2-slim
      volumeMounts:
      - {mountPath: /kfp-launcher, name: kfp-launcher}
    inputs:
      parameters:
      - {name: pipeline-name}
      - {name: pipeline-root}
    metadata:
      annotations:
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/component_ref: '{"digest": "d2775d3a984fa6922341c578c5730e50265b4a6a81de9d3932f0ad79333f3e4c",
          "url": "../../components/katib-solver/component.yaml"}'
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.11
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/v2_component: "true"
        pipelines.kubeflow.org/enable_caching: "true"
    initContainers:
    - command: [launcher, --copy, /kfp-launcher/launch]
      image: gcr.io/ml-pipeline/kfp-launcher:1.8.7
      name: kfp-launcher
      mirrorVolumeMounts: true
    volumes:
    - {name: kfp-launcher}
  - name: katib-solver-pipeline
    inputs:
      parameters:
      - {name: pipeline-name}
      - {name: pipeline-root}
    dag:
      tasks:
      - name: katib-solver
        template: katib-solver
        arguments:
          parameters:
          - {name: pipeline-name, value: '{{inputs.parameters.pipeline-name}}'}
          - {name: pipeline-root, value: '{{inputs.parameters.pipeline-root}}'}
  arguments:
    parameters:
    - {name: pipeline-root, value: ''}
    - {name: pipeline-name, value: pipeline/katib-solver-pipeline}
  serviceAccountName: pipeline-runner
