openapi: 3.0.3
info:
  title: Model Manager
  description: Model Manager
  version: 1.0.0
servers:
  - url: 'http://modelmanager.os4ml.svc.cluster.local:8000/apis/v1beta1/modelmanager'
paths:

  "/solvers":
    get:
      summary: 'get all solver'
      operationId: getAllSolvers
      tags:
        - modelmanager
        - solver
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './shared-oas.yaml#/components/schemas/Solver'

  "/solvers/{solverName}":
    get:
      summary: 'get solver by name'
      operationId: getSolverByName
      parameters:
        - $ref: '#/components/parameters/SolverName'
      tags:
        - modelmanager
        - solver
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: './shared-oas.yaml#/components/schemas/Solver'
        404:
          $ref: '#/components/responses/NotFound'

  "/solutions":
    get:
      summary: 'get all solutions'
      operationId: getAllSolutions
      tags:
        - modelmanager
        - solution
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './shared-oas.yaml#/components/schemas/Solution'
    post:
      summary: "Create a Solution"
      operationId: postSolution
      tags:
        - modelmanager
        - solution
      requestBody:
        content:
          application/json:
            schema:
              $ref: './shared-oas.yaml#/components/schemas/Solution'
      responses:
        201:
          description: "Solution created"
          content:
            application/json:
              schema:
                $ref: './shared-oas.yaml#/components/schemas/RunId'

  "/solutions/{solutionName}":
    get:
      summary: "Get a solution"
      operationId: getSolutionByName
      parameters:
        - $ref: '#/components/parameters/SolutionName'
      tags:
        - modelmanager
        - solution
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: './shared-oas.yaml#/components/schemas/Solution'
        404:
          $ref: '#/components/responses/NotFound'
    put:
      summary: "Update a Solution"
      operationId: putSolution
      parameters:
        - $ref: '#/components/parameters/SolutionName'
      tags:
        - modelmanager
        - solution
      requestBody:
        content:
          application/json:
            schema:
              $ref: './shared-oas.yaml#/components/schemas/Solution'
      responses:
        200:
          description: "Solution updated"
          content:
            application/json:
              schema:
                $ref: './shared-oas.yaml#/components/schemas/Solution'
    delete:
      summary: "Delete a Solution"
      operationId: deleteSolution
      parameters:
        - $ref: '#/components/parameters/SolutionName'
      tags:
        - modelmanager
        - solution
      responses:
        204:
          $ref: '#/components/responses/Deleted'

  "/solutions/{solutionName}/model":
    get:
      summary: "get a download link for the model of the specified solution"
      operationId: getDownloadLinkForModelOfSolution
      parameters:
        - $ref: '#/components/parameters/SolutionName'
      tags:
        - modelmanager
        - solution
      responses:
        200:
          description: "Download link"
          content:
            application/json:
              schema:
                type: string
        404:
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Error:
      required:
        - path
        - error
        - timestamp
        - message
        - status
  parameters:
    SolverName:
      name: solverName
      in: path
      description: name of the solver
      required: true
      schema:
        type: string
    SolutionName:
      name: solutionName
      in: path
      description: Name of the Solution
      required: true
      schema:
        type: string
  responses:
    Created:
      description: New resource created
    Deleted:
      description: The specified resource was deleted
    Updated:
      description: The specified resource was updated
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    RequestBodyMismatch:
      description: The provided request body has the wrong format
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    RequestBodyInvalid:
      description: The content of the request body is invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
