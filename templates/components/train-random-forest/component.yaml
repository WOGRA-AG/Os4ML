name: Train random forest
inputs:
- {name: data_x, type: Dataset}
- {name: data_y, type: Dataset}
outputs:
- {name: class_metrics, type: ClassificationMetrics}
- {name: metrics, type: Metrics}
- {name: Output, type: Float}
implementation:
  container:
    image: python:3.9.10-slim
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'pandas>=1.4.0' 'scikit-learn>=1.0.2' 'kfp==1.8.12' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def train_random_forest(
          data_x: Input[Dataset],
          data_y: Input[Dataset],
          class_metrics: Output[ClassificationMetrics],
          metrics: Output[Metrics],
      ) -> float:
          import pandas as pd
          from sklearn.ensemble import RandomForestClassifier
          from sklearn.metrics import confusion_matrix
          from sklearn.model_selection import train_test_split

          random_state = 42
          with open(data_x.path, "r") as f:
              df_x = pd.read_csv(f)
          with open(data_y.path, "r") as f:
              df_y = pd.read_csv(f)
          x_train, x_test, y_train, y_test = train_test_split(
              df_x, df_y, test_size=0.33, random_state=random_state
          )
          clf = RandomForestClassifier(n_estimators=100, random_state=random_state)
          clf.fit(x_train, y_train)
          score = clf.score(x_test, y_test)
          y_pred = clf.predict(x_test)
          conf_matrix = confusion_matrix(y_test, y_pred).tolist()
          class_metrics.log_confusion_matrix(["Died", "Survived"], conf_matrix)
          metrics.log_metric("accuracy", score)
          return score

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train_random_forest
