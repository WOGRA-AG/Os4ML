stages:
  - prepare
  - test
  - build
  - deploy
  - clean

.terraform:
  image: $CI_REGISTRY/developer/images/gitlab-terraform-gcloud-kubectl:gcloud364-terraform1.1
  variables:
    TF_CLI_CONFIG_FILE: $CI_PROJECT_DIR/.terraformrc
    TF_ROOT: ${CI_PROJECT_DIR}/terraform
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${$GCP_cluster_name}
  cache:
    key: tf-cache
    paths:
      - ${TF_ROOT}/.terraform
  before_script:
    - gitlab-terraform --version
    - echo -e "credentials \"$CI_SERVER_HOST\" {\n  token = \"$CI_JOB_TOKEN\"\n}" > $TF_CLI_CONFIG_FILE
    - cd ${TF_ROOT}
    - gcloud auth activate-service-account $GCP_service_account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    - gcloud container clusters get-credentials $GCP_cluster_name --zone=$GCP_zone --project=$GCP_project

terraform-init:
  stage: prepare
  extends:
    - .terraform
  script:
    - gitlab-terraform init

terraform-validate:
  stage: test
  extends:
    - .terraform
  script:
    - gitlab-terraform fmt -check
    - gitlab-terraform validate

terraform-plan:
  stage: build
  extends:
    - .terraform
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: terraform
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

terraform-apply:
  stage: deploy
  extends:
    - .terraform
  environment:
    name: production
  script:
    - gitlab-terraform apply
  needs:
    - terraform-plan
  retry:
    max: 2
    when: always
  when: manual
  only:
    - main

terraform-destroy:
  stage: clean
  extends:
    - .terraform
  environment:
    name: production
  script:
    - gitlab-terraform destroy
  when: manual
  only:
    - main


# Build frontend Image and push to registry
.build-frontend:
  stage: build
  needs: [ ]
  image: $CI_REGISTRY/developer/images/node-java:node-16-jre-11
  before_script:
    - apt-get update -y && apt-get upgrade -y
    - curl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o google-chrome-stable_current_amd64.deb
    - apt install -y ./google-chrome*.deb;
    - export CHROME_BIN=/usr/bin/google-chrome
  script:
    - cd $DIR
    - npm install --cache .npm_cache
    - npm run lint
    - npm run test:ci
    - npm run build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH'
      changes:
        - $DIR/**/*
      when: on_success

.build-frontend-image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --reproducible
      --context $DIR
      --dockerfile Dockerfile
      --destination $CI_REGISTRY_IMAGE/$IMG_NAME:$CI_COMMIT_REF_NAME
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH'
      changes:
        - $DIR/**/*
      when: on_success

build-os4ml-frontend:
  extends:
    - .build-frontend
  variables:
    DIR: 'services/frontend'
    IMG_NAME: 'os4ml-frontend'
  artifacts:
    paths:
      - services/frontend/dist/os4ml
  cache:
    key: os4ml-frontend
    paths:
      - services/frontend/node_modules
      - services/frontend/.npm_cache

build-os4ml-frontend-image:
  extends:
    - .build-frontend-image
  needs:
    - build-os4ml-frontend
  dependencies:
    - build-os4ml-frontend
  variables:
    DIR: 'services/frontend'
    IMG_NAME: 'os4ml-frontend'
