stages:
  - prepare:gcp
  - validate:gcp
  - build:gcp
  - deploy:gcp
  - destroy:gcp
  - prepare:kubeflow
  - validate:kubeflow
  - build:kubeflow
  - deploy:kubeflow
  - destroy:kubeflow

#Deploy Budget Watchdog for Google Cloud Project with terraform
.tf-watchdog:
  image: $CI_REGISTRY/developer/images/gitlab-terraform-gcloud-kubectl:gcloud-364-0-0
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/terraform/administration/budget-watchdog
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/gcp-budget-watchdog
    GOOGLE_APPLICATION_CREDENTIALS: ${TF_ROOT}/serviceaccount.json
  cache:
    key: gcp-budget-watchdog
    paths:
      - ${TF_ROOT}/.terraform
  before_script:
    - apk --no-cache add zip
    - echo $GCP_CREDENTIALS | base64 -d > ${TF_ROOT}/serviceaccount.json
    - cd ${TF_ROOT}/code
    - zip -r -D index.zip *
    - cd ${TF_ROOT}

gcp-watchdog-init:
  stage: prepare:gcp
  extends:
    - .tf-watchdog
  script:
    - gitlab-terraform init

gcp-watchdog-validate:
  stage: validate:gcp
  extends:
    - .tf-watchdog
  script:
    - gitlab-terraform fmt -check
    - gitlab-terraform validate

gcp-watchdog-plan:
  stage: build:gcp
  extends:
    - .tf-watchdog
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: GCP-watchdog
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

gcp-watchdog-apply:
  stage: deploy:gcp
  extends:
    - .tf-watchdog
  environment:
    name: production
  script:
    - gitlab-terraform apply
  needs:
    - gcp-watchdog-plan
  when: manual
  only:
    - main

gcp-watchdog-destroy:
  stage: destroy:gcp
  extends:
    - .tf-watchdog
  environment:
    name: production
  script:
    - gitlab-terraform destroy
  when: manual
  only:
    - main

# Deploy Google Kubernetes Engine (GKE) Cluster with terraform
.tf-gke:
  image: $CI_REGISTRY/developer/images/gitlab-terraform-gcloud-kubectl:gcloud-364-0-0
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/terraform/infrastructure
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/gke
    GOOGLE_APPLICATION_CREDENTIALS: ${TF_ROOT}/serviceaccount.json
    TF_VAR_env_label: $CI_COMMIT_REF_SLUG
  cache:
    key: gke
    paths:
      - ${TF_ROOT}/.terraform
  before_script:
    - echo $GCP_CREDENTIALS | base64 -d > ${TF_ROOT}/serviceaccount.json
    - cd ${TF_ROOT}

gke-init:
  stage: prepare:gcp
  extends:
    - .tf-gke
  script:
    - gitlab-terraform init

gke-validate:
  stage: validate:gcp
  extends:
    - .tf-gke
  script:
    - gitlab-terraform fmt -check
    - gitlab-terraform validate

gke-plan:
  stage: build:gcp
  extends:
    - .tf-gke
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: GKE
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

gke-apply:
  stage: deploy:gcp
  extends:
    - .tf-gke
  environment:
    name: production
  script:
    - gitlab-terraform apply
  needs:
    - gke-plan
  retry:
    max: 2
    when: always
  when: manual
  only:
    - main

gke-destroy:
  stage: destroy:gcp
  extends:
    - .tf-gke
  environment:
    name: production
  script:
    - gitlab-terraform destroy
  when: manual
  only:
    - main

# Build frontend Image and push to registry
.build-frontend:
  stage: build:kubeflow
  needs: [ ]
  image: $CI_REGISTRY/developer/images/node-java:node-16-jre-11
  before_script:
    - curl https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -o google-chrome-stable_current_amd64.deb
    - apt install -y ./google-chrome*.deb;
    - export CHROME_BIN=/usr/bin/google-chrome
  script:
    - cd $DIR
    - npm install --cache .npm_cache
    - npm run lint
    - npm run test:ci
    - npm run build
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH'
      changes:
        - $DIR/**/*
      when: on_success

.build-frontend-image:
  stage: build:kubeflow
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --reproducible
      --context $DIR
      --dockerfile Dockerfile
      --destination $CI_REGISTRY_IMAGE/$IMG_NAME:$CI_COMMIT_REF_NAME
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH'
      changes:
        - $DIR/**/*
      when: on_success

build-os4ml-frontend:
  extends:
    - .build-frontend
  variables:
    DIR: 'services/frontend'
    IMG_NAME: 'os4ml-frontend'
  artifacts:
    paths:
      - services/frontend/dist/os4ml
  cache:
    key: os4ml-frontend
    paths:
      - services/frontend/node_modules
      - services/frontend/.npm_cache

build-os4ml-frontend-image:
  extends:
    - .build-frontend-image
  needs:
    - build-os4ml-frontend
  dependencies:
    - build-os4ml-frontend
  variables:
    DIR: 'services/frontend'
    IMG_NAME: 'os4ml-frontend'

# Deploy Kubeflow on GKE Cluster using terraform
.tf-kubeflow:
  image: $CI_REGISTRY/developer/images/gitlab-terraform-gcloud-kubectl:gcloud-364-0-0
  variables:
    TF_ROOT: ${CI_PROJECT_DIR}/terraform/kubeflow
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/kubeflow
    GOOGLE_APPLICATION_CREDENTIALS: ${TF_ROOT}/serviceaccount.json
  cache:
    key: kubeflow
    paths:
      - ${TF_ROOT}/.terraform
  before_script:
    - echo $GCP_CREDENTIALS | base64 -d > ${TF_ROOT}/serviceaccount.json
    - cd ${TF_ROOT}
    - gcloud config set auth/impersonate_service_account $TF_VAR_terraform_account
    - gcloud auth activate-service-account --key-file=${TF_ROOT}/serviceaccount.json --impersonate-service-account=$TF_VAR_terraform_account
    - gcloud container clusters get-credentials $TF_VAR_cluster_name --impersonate-service-account=$TF_VAR_terraform_account
      --zone=$TF_VAR_cluster_zone --project=$TF_VAR_project

kubeflow-init:
  stage: prepare:kubeflow
  extends:
    - .tf-kubeflow
  script:
    - gitlab-terraform init

kubeflow-validate:
  stage: validate:kubeflow
  extends:
    - .tf-kubeflow
  script:
    - gitlab-terraform fmt -check
    - gitlab-terraform validate

kubeflow-plan:
  stage: build:kubeflow
  needs:
    - build-os4ml-frontend
  extends:
    - .tf-kubeflow
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: Kubeflow
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

kubeflow-apply:
  stage: deploy:kubeflow
  extends:
    - .tf-kubeflow
  environment:
    name: production
  script:
    - gitlab-terraform apply
  needs:
    - kubeflow-plan
  retry:
    max: 2
    when: always
  when: manual
  only:
    - main

kubeflow-destroy:
  stage: destroy:kubeflow
  extends:
    - .tf-kubeflow
  environment:
    name: production
  script:
    - gitlab-terraform destroy
  when: manual
  only:
    - main