terraform-init:
  stage: prepare
  extends:
    - .terraform
  script:
    - gitlab-terraform init

terraform-validate:
  stage: test
  extends:
    - .terraform
  script:
    - gitlab-terraform fmt -check
    - gitlab-terraform validate

terraform-plan:
  stage: build
  extends:
    - .terraform
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: terraform
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json

terraform-apply:
  stage: deploy
  extends:
    - .terraform
  environment:
    name: production
  script:
    - gitlab-terraform apply
  needs:
    - terraform-plan
  retry:
    max: 2
    when: always
  when: manual
  only:
    - main

terraform-destroy:
  stage: clean
  extends:
    - .terraform
  environment:
    name: production
  script:
    - gitlab-terraform destroy
  when: manual
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'

.terraform:
  image: $CI_REGISTRY/developer/images/gitlab-terraform-gcloud-kubectl:gcloud364-terraform1.1
  variables:
    TF_CLI_CONFIG_FILE: $CI_PROJECT_DIR/.terraformrc
    TF_ROOT: ${CI_PROJECT_DIR}/terraform
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${$GCP_cluster_name}
  cache:
    key: tf-cache
    paths:
      - ${TF_ROOT}/.terraform
  before_script:
    - gitlab-terraform --version
    - echo -e "credentials \"$CI_SERVER_HOST\" {\n  token = \"$CI_JOB_TOKEN\"\n}" > $TF_CLI_CONFIG_FILE
    - cd ${TF_ROOT}
    - gcloud auth activate-service-account $GCP_service_account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
    - gcloud container clusters get-credentials $GCP_cluster_name --zone=$GCP_zone --project=$GCP_project
